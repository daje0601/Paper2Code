[{"role": "system", "content": "You are an expert researcher, strategic analyzer and software engineer with a deep understanding of experimental design and reproducibility in scientific research.\nYou will receive a research paper in JSON format, an overview of the plan, a design in JSON format consisting of \"Implementation approach\", \"File list\", \"Data structures and interfaces\", and \"Program call flow\", followed by a task in JSON format that includes \"Required packages\", \"Required other language third-party packages\", \"Logic Analysis\", and \"Task list\", along with a configuration file named \"config.yaml\". \n\nYour task is to conduct a comprehensive logic analysis to accurately reproduce the experiments and methodologies described in the research paper. \nThis analysis must align precisely with the paper\u2019s methodology, experimental setup, and evaluation criteria.\n\n1. Align with the Paper: Your analysis must strictly follow the methods, datasets, model configurations, hyperparameters, and experimental setups described in the paper.\n2. Be Clear and Structured: Present your analysis in a logical, well-organized, and actionable format that is easy to follow and implement.\n3. Prioritize Efficiency: Optimize the analysis for clarity and practical implementation while ensuring fidelity to the original experiments.\n4. Follow design: YOU MUST FOLLOW \"Data structures and interfaces\". DONT CHANGE ANY DESIGN. Do not use public member functions that do not exist in your design.\n5. REFER TO CONFIGURATION: Always reference settings from the config.yaml file. Do not invent or assume any values\u2014only use configurations explicitly provided.\n     \n"}, {"role": "user", "content": "## Paper\n{'paper_id': 'Transformer', 'title': 'Provided proper attribution is provided, Google hereby grants permission to reproduce the tables and figures in this paper solely for use in journalistic or scholarly works. Attention Is All You Need', 'abstract': 'The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 Englishto-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data. * Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research.\\n\u2020 Work performed while at Google Brain.\\n\u2021 Work performed while at Google Research.', 'pdf_parse': {'paper_id': 'Transformer', 'abstract': [{'text': 'The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 Englishto-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data. * Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research.', 'section': 'Abstract', 'sec_num': None}, {'text': '\u2020 Work performed while at Google Brain.', 'section': 'Abstract', 'sec_num': None}, {'text': '\u2021 Work performed while at Google Research.', 'section': 'Abstract', 'sec_num': None}], 'body_text': [{'text': 'Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [35, 2, 5] . Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [38, 24, 15] .', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states h t , as a function of the previous hidden state h t-1 and the input for position t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples. Recent work has achieved significant improvements in computational efficiency through factorization tricks [21] and conditional computation [32] , while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2, 19] . In all but a few cases [27] , however, such attention mechanisms are used in conjunction with a recurrent network.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.', 'section': 'Introduction', 'sec_num': '1'}, {'text': 'The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [16] , ByteNet [18] and ConvS2S [9] , all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions [12] . In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2.', 'section': 'Background', 'sec_num': '2'}, {'text': 'Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence. Self-attention has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4, 27, 28, 22] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'End-to-end memory networks are based on a recurrent attention mechanism instead of sequencealigned recurrence and have been shown to perform well on simple-language question answering and language modeling tasks [34] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [17, 18] and [9] .', 'section': 'Background', 'sec_num': '2'}, {'text': 'Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35] . Here, the encoder maps an input sequence of symbol representations (x 1 , ..., x n ) to a sequence of continuous representations z = (z 1 , ..., z n ). Given z, the decoder then generates an output sequence (y 1 , ..., y m ) of symbols one element at a time. At each step the model is auto-regressive [10] , consuming the previously generated symbols as additional input when generating the next. The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1 , respectively.', 'section': 'Model Architecture', 'sec_num': '3'}, {'text': 'Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of the two sub-layers, followed by layer normalization [1] . That is, the output of each sub-layer is LayerNorm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding layers, produce outputs of dimension d model = 512.', 'section': 'Encoder and Decoder Stacks', 'sec_num': '3.1'}, {'text': 'Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head attention over the output of the encoder stack. Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization. We also modify the self-attention sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This masking, combined with fact that the output embeddings are offset by one position, ensures that the predictions for position i can depend only on the known outputs at positions less than i.', 'section': 'Encoder and Decoder Stacks', 'sec_num': '3.1'}, {'text': 'An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum Scaled Dot-Product Attention Multi-Head Attention of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.', 'section': 'Attention', 'sec_num': '3.2'}, {'text': 'We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2 ). The input consists of queries and keys of dimension d k , and values of dimension d v . We compute the dot products of the query with all keys, divide each by \u221a d k , and apply a softmax function to obtain the weights on the values.', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V . We compute the matrix of outputs as:', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'EQUATION', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'The two most commonly used attention functions are additive attention [2] , and dot-product (multiplicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor of 1', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '\u221a d k', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '. Additive attention computes the compatibility function using a feed-forward network with a single hidden layer. While the two are similar in theoretical complexity, dot-product attention is much faster and more space-efficient in practice, since it can be implemented using highly optimized matrix multiplication code.', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'While for small values of d k the two mechanisms perform similarly, additive attention outperforms dot product attention without scaling for larger values of d k [3] . We suspect that for large values of d k , the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients4 . To counteract this effect, we scale the dot products by 1', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': '\u221a d k .', 'section': 'Scaled Dot-Product Attention', 'sec_num': '3.2.1'}, {'text': 'Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k , d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final values, as depicted in Figure 2 .', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions. With a single attention head, averaging inhibits this.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'MultiHead(Q, K, V ) = Concat(head 1 , ..., head h )W O', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'where', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'head i = Attention(QW Q i , KW K i , V W V i )', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Where the projections are parameter matrices', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'W Q i \u2208 R dmodel\u00d7d k , W K i \u2208 R dmodel\u00d7d k , W V i \u2208 R dmodel\u00d7dv and W O \u2208 R hdv\u00d7dmodel .', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'In this work we employ h = 8 parallel attention layers, or heads. For each of these we use', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'd k = d v = d model /h = 64.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'Due to the reduced dimension of each head, the total computational cost is similar to that of single-head attention with full dimensionality.', 'section': 'Multi-Head Attention', 'sec_num': '3.2.2'}, {'text': 'The Transformer uses multi-head attention in three different ways:', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [38, 2, 9] .', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder.', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': '\u2022 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position. We need to prevent leftward information flow in the decoder to preserve the auto-regressive property. We implement this inside of scaled dot-product attention by masking out (setting to -\u221e) all values in the input of the softmax which correspond to illegal connections. See Figure 2 .', 'section': 'Applications of Attention in our Model', 'sec_num': '3.2.3'}, {'text': 'In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'EQUATION', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'While the linear transformations are the same across different positions, they use different parameters from layer to layer. Another way of describing this is as two convolutions with kernel size 1.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'The dimensionality of input and output is d model = 512, and the inner-layer has dimensionality d f f = 2048.', 'section': 'Position-wise Feed-Forward Networks', 'sec_num': '3.3'}, {'text': 'Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension d model . We also use the usual learned linear transformation and softmax function to convert the decoder output to predicted next-token probabilities. In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to [30] . In the embedding layers, we multiply those weights by \u221a d model . ', 'section': 'Embeddings and Softmax', 'sec_num': '3.4'}, {'text': '(n 2 \u2022 d) O(1) O(1) Recurrent O(n \u2022 d 2 ) O(n) O(n) Convolutional O(k \u2022 n \u2022 d 2 ) O(1) O(log k (n)) Self-Attention (restricted) O(r \u2022 n \u2022 d) O(1) O(n/r)', 'section': 'Embeddings and Softmax', 'sec_num': '3.4'}, {'text': 'Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed [9] .', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'In this work, we use sine and cosine functions of different frequencies:', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'P E (pos,2i) = sin(pos/10000 2i/dmodel ) P E (pos,2i+1) = cos(pos/10000 2i/dmodel )', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'where pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2\u03c0 to 10000 \u2022 2\u03c0. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k, P E pos+k can be represented as a linear function of P E pos .', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'We also experimented with using learned positional embeddings [9] instead, and found that the two versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training.', 'section': 'Positional Encoding', 'sec_num': '3.5'}, {'text': 'In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1 , ..., x n ) to another sequence of equal length (z 1 , ..., z n ), with x i , z i \u2208 R d , such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'One is the total computational complexity per layer. Another is the amount of computation that can be parallelized, as measured by the minimum number of sequential operations required.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'The third is the path length between long-range dependencies in the network. Learning long-range dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the ability to learn such dependencies is the length of the paths forward and backward signals have to traverse in the network. The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn long-range dependencies [12] . Hence we also compare the maximum path length between any two input and output positions in networks composed of the different layer types.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'As noted in Table 1 , a self-attention layer connects all positions with a constant number of sequentially executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of computational complexity, self-attention layers are faster than recurrent layers when the sequence length n is smaller than the representation dimensionality d, which is most often the case with sentence representations used by state-of-the-art models in machine translations, such as word-piece [38] and byte-pair [31] representations. To improve computational performance for tasks involving very long sequences, self-attention could be restricted to considering only a neighborhood of size r in the input sequence centered around the respective output position. This would increase the maximum path length to O(n/r). We plan to investigate this approach further in future work.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'A single convolutional layer with kernel width k < n does not connect all pairs of input and output positions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels, or O(log k (n)) in the case of dilated convolutions [18] , increasing the length of the longest paths between any two positions in the network. Convolutional layers are generally more expensive than recurrent layers, by a factor of k. Separable convolutions [6] , however, decrease the complexity considerably, to O(k', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': '\u2022 n \u2022 d + n \u2022 d 2 ).', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'Even with k = n, however, the complexity of a separable convolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer, the approach we take in our model.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'As side benefit, self-attention could yield more interpretable models. We inspect attention distributions from our models and present and discuss examples in the appendix. Not only do individual attention heads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic and semantic structure of the sentences.', 'section': 'Why Self-Attention', 'sec_num': '4'}, {'text': 'This section describes the training regime for our models.', 'section': 'Training', 'sec_num': '5'}, {'text': 'We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding [3] , which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary [38] . Sentence pairs were batched together by approximate sequence length. Each training batch contained a set of sentence pairs containing approximately 25000 source tokens and 25000 target tokens.', 'section': 'Training Data and Batching', 'sec_num': '5.1'}, {'text': 'We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds. We trained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the bottom line of table 3 ), step time was 1.0 seconds. The big models were trained for 300,000 steps (3.5 days).', 'section': 'Hardware and Schedule', 'sec_num': '5.2'}, {'text': 'We used the Adam optimizer [20] with \u03b2 1 = 0.9, \u03b2 2 = 0.98 and \u03f5 = 10 -9 . We varied the learning rate over the course of training, according to the formula:', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'EQUATION', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'This corresponds to increasing the learning rate linearly for the first warmup_steps training steps, and decreasing it thereafter proportionally to the inverse square root of the step number. We used warmup_steps = 4000.', 'section': 'Optimizer', 'sec_num': '5.3'}, {'text': 'We employ three types of regularization during training: Residual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.', 'section': 'Regularization', 'sec_num': '5.4'}, {'text': 'During training, we employed label smoothing of value \u03f5 ls = 0.1 [36] . This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.', 'section': 'Label Smoothing', 'sec_num': None}, {'text': '6 Results', 'section': 'Label Smoothing', 'sec_num': None}, {'text': 'On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2 ) outperforms the best previously reported models (including ensembles) by more than 2.0 BLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is listed in the bottom line of Table 3 . Training took 3.5 days on 8 P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models.', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0, outperforming all of the previously published single models, at less than 1/4 the training cost of the previous state-of-the-art model. The Transformer (big) model trained for English-to-French used dropout rate P drop = 0.1, instead of 0.3.', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'For the base models, we used a single model obtained by averaging the last 5 checkpoints, which were written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We used beam search with a beam size of 4 and length penalty \u03b1 = 0.6 [38] . These hyperparameters were chosen after experimentation on the development set. We set the maximum output length during inference to input length + 50, but terminate early when possible [38] .', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'Table 2 summarizes our results and compares our translation quality and training costs to other model architectures from the literature. We estimate the number of floating point operations used to train a model by multiplying the training time, the number of GPUs used, and an estimate of the sustained single-precision floating-point capacity of each GPU5 .', 'section': 'Machine Translation', 'sec_num': '6.1'}, {'text': 'To evaluate the importance of different components of the Transformer, we varied our base model in different ways, measuring the change in performance on English-to-German translation on the . We used beam search as described in the previous section, but no checkpoint averaging. We present these results in Table 3 .', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions, keeping the amount of computation constant, as described in Section 3.2.2. While single-head attention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'In Table 3 rows (B), we observe that reducing the attention key size d k hurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9] , and observe nearly identical results to the base model.', 'section': 'Model Variations', 'sec_num': '6.2'}, {'text': 'To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37] .', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'We trained a 4-layer transformer with d model = 1024 on the Wall Street Journal (WSJ) portion of the Penn Treebank [25] , about 40K training sentences. We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences [37] . We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'We performed only a small number of experiments to select the dropout, both attention and residual (section 5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length + 300. We used a beam size of 21 and \u03b1 = 0.3 for both WSJ only and the semi-supervised setting.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'Our results in Table 4 show that despite the lack of task-specific tuning our model performs surprisingly well, yielding better results than all previously reported models with the exception of the Recurrent Neural Network Grammar [8] .', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'In contrast to RNN sequence-to-sequence models [37] , the Transformer outperforms the Berkeley-Parser [29] even when training only on the WSJ training set of 40K sentences.', 'section': 'English Constituency Parsing', 'sec_num': '6.3'}, {'text': 'In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'We are excited about the future of attention-based models and plan to apply them to other tasks. We plan to extend the Transformer to problems involving input and output modalities other than text and to investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs such as images, audio and video. Making generation less sequential is another research goals of ours.', 'section': 'Conclusion', 'sec_num': '7'}, {'text': 'The code we used to train and evaluate our models is available at https://github.com/ tensorflow/tensor2tensor. ', 'section': 'Conclusion', 'sec_num': '7'}, {'text': \"The Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word.\", 'section': 'Input-Input Layer5', 'sec_num': None}, {'text': 'The ', 'section': 'Input-Input Layer5', 'sec_num': None}, {'text': 'To illustrate why the dot products get large, assume that the components of q and k are independent random variables with mean 0 and variance 1. Then their dot product, q \u2022 k = d k i=1 qiki, has mean 0 and variance d k .', 'section': '', 'sec_num': None}, {'text': 'We used values of 2.8, 3.7,', 'section': '', 'sec_num': None}, {'text': '6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.', 'section': '', 'sec_num': None}], 'back_matter': [{'text': 'Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful comments, corrections and inspiration.', 'section': 'acknowledgement', 'sec_num': None}], 'ref_entries': {'FIGREF0': {'text': 'Figure 1: The Transformer -model architecture.', 'num': None, 'type_str': 'figure', 'fig_num': '1', 'uris': None}, 'FIGREF1': {'text': 'Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel.', 'num': None, 'type_str': 'figure', 'fig_num': '2', 'uris': None}, 'FIGREF2': {'text': \"Figure 3: An example of the attention mechanism following long-distance dependencies in the encoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of the verb 'making', completing the phrase 'making...more difficult'. Attentions here shown only for the word 'making'. Different colors represent different heads. Best viewed in color.\", 'num': None, 'type_str': 'figure', 'fig_num': '3', 'uris': None}, 'FIGREF3': {'text': \"Figure4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top: Full attentions for head 5. Bottom: Isolated attentions from just the word 'its' for attention heads 5 and 6. Note that the attentions are very sharp for this word.\", 'num': None, 'type_str': 'figure', 'fig_num': '4', 'uris': None}, 'FIGREF4': {'text': 'Figure5: Many of the attention heads exhibit behaviour that seems related to the structure of the sentence. We give two such examples above, from two different heads from the encoder self-attention at layer 5 of 6. The heads clearly learned to perform different tasks.', 'num': None, 'type_str': 'figure', 'fig_num': '5', 'uris': None}, 'TABREF0': {'text': 'Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Layer Type</td><td>Complexity per Layer Sequential Maximum Path Length</td></tr><tr><td/><td>Operations</td></tr><tr><td>Self-Attention</td><td>O</td></tr></table>'}, 'TABREF1': {'text': 'The Transformer achieves better BLEU scores than previous state-of-the-art models on the English-to-German and English-to-French newstest2014 tests at a fraction of the training cost.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Model</td><td colspan=\"2\">BLEU EN-DE EN-FR</td><td>Training Cost (FLOPs) EN-DE EN-FR</td></tr><tr><td>ByteNet [18]</td><td>23.75</td><td/><td/></tr><tr><td>Deep-Att + PosUnk [39]</td><td/><td>39.2</td><td>1.0 \u2022 10 20</td></tr><tr><td>GNMT + RL [38]</td><td>24.6</td><td>39.92</td><td>2.3 \u2022 10 19 1.4 \u2022 10 20</td></tr><tr><td>ConvS2S [9]</td><td>25.16</td><td>40.46</td><td>9.6 \u2022 10 18 1.5 \u2022 10 20</td></tr><tr><td>MoE [32]</td><td>26.03</td><td>40.56</td><td>2.0 \u2022 10 19 1.2 \u2022 10 20</td></tr><tr><td>Deep-Att + PosUnk Ensemble [39]</td><td/><td>40.4</td><td>8.0 \u2022 10 20</td></tr><tr><td>GNMT + RL Ensemble [38]</td><td>26.30</td><td>41.16</td><td>1.8 \u2022 10 20 1.1 \u2022 10 21</td></tr><tr><td>ConvS2S Ensemble [9]</td><td>26.36</td><td>41.29</td><td>7.7 \u2022 10 19 1.2 \u2022 10 21</td></tr><tr><td>Transformer (base model)</td><td>27.3</td><td>38.1</td><td>3.3 \u2022 10 18</td></tr><tr><td>Transformer (big)</td><td>28.4</td><td>41.8</td><td>2.3 \u2022 10 19</td></tr></table>'}, 'TABREF2': {'text': 'Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td/><td colspan=\"2\">N d model</td><td>d ff</td><td>h</td><td>d k</td><td>d v</td><td colspan=\"2\">P drop \u03f5 ls</td><td>train steps (dev) (dev) PPL BLEU params \u00d710 6</td></tr><tr><td colspan=\"2\">base 6</td><td>512</td><td colspan=\"2\">2048 8</td><td>64</td><td>64</td><td>0.1</td><td colspan=\"2\">0.1 100K 4.92</td><td>25.8</td><td>65</td></tr><tr><td/><td/><td/><td/><td colspan=\"3\">1 512 512</td><td/><td/><td>5.29</td><td>24.9</td></tr><tr><td>(A)</td><td/><td/><td/><td colspan=\"3\">4 128 128 16 32 32</td><td/><td/><td>5.00 4.91</td><td>25.5 25.8</td></tr><tr><td/><td/><td/><td/><td colspan=\"2\">32 16</td><td>16</td><td/><td/><td>5.01</td><td>25.4</td></tr><tr><td>(B)</td><td/><td/><td/><td/><td>16 32</td><td/><td/><td/><td>5.16 5.01</td><td>25.1 25.4</td><td>58 60</td></tr><tr><td/><td>2</td><td/><td/><td/><td/><td/><td/><td/><td>6.11</td><td>23.7</td><td>36</td></tr><tr><td/><td>4</td><td/><td/><td/><td/><td/><td/><td/><td>5.19</td><td>25.3</td><td>50</td></tr><tr><td/><td>8</td><td/><td/><td/><td/><td/><td/><td/><td>4.88</td><td>25.5</td><td>80</td></tr><tr><td>(C)</td><td/><td>256</td><td/><td/><td>32</td><td>32</td><td/><td/><td>5.75</td><td>24.5</td><td>28</td></tr><tr><td/><td/><td>1024</td><td/><td/><td colspan=\"2\">128 128</td><td/><td/><td>4.66</td><td>26.0</td><td>168</td></tr><tr><td/><td/><td/><td>1024</td><td/><td/><td/><td/><td/><td>5.12</td><td>25.4</td><td>53</td></tr><tr><td/><td/><td/><td>4096</td><td/><td/><td/><td/><td/><td>4.75</td><td>26.2</td><td>90</td></tr><tr><td/><td/><td/><td/><td/><td/><td/><td>0.0</td><td/><td>5.77</td><td>24.6</td></tr><tr><td>(D)</td><td/><td/><td/><td/><td/><td/><td>0.2</td><td>0.0</td><td>4.95 4.67</td><td>25.5 25.3</td></tr><tr><td/><td/><td/><td/><td/><td/><td/><td/><td>0.2</td><td>5.47</td><td>25.7</td></tr><tr><td>(E)</td><td/><td colspan=\"7\">positional embedding instead of sinusoids</td><td>4.92</td><td>25.7</td></tr><tr><td>big</td><td>6</td><td colspan=\"3\">1024 4096 16</td><td/><td/><td>0.3</td><td/><td>300K 4.33</td><td>26.4</td><td>213</td></tr><tr><td colspan=\"4\">development set, newstest2013</td><td/><td/><td/><td/><td/></tr></table>'}, 'TABREF3': {'text': 'The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ)', 'num': None, 'type_str': 'table', 'html': None, 'content': '<table><tr><td>Parser</td><td>Training</td><td>WSJ 23 F1</td></tr><tr><td colspan=\"2\">Vinyals &amp; Kaiser el al. (2014) [37] WSJ only, discriminative</td><td>88.3</td></tr><tr><td>Petrov et al. (2006) [29]</td><td>WSJ only, discriminative</td><td>90.4</td></tr><tr><td>Zhu et al. (2013) [40]</td><td>WSJ only, discriminative</td><td>90.4</td></tr><tr><td>Dyer et al. (2016) [8]</td><td>WSJ only, discriminative</td><td>91.7</td></tr><tr><td>Transformer (4 layers)</td><td>WSJ only, discriminative</td><td>91.3</td></tr><tr><td>Zhu et al. (2013) [40]</td><td>semi-supervised</td><td>91.3</td></tr><tr><td>Huang &amp; Harper (2009) [14]</td><td>semi-supervised</td><td>91.3</td></tr><tr><td>McClosky et al. (2006) [26]</td><td>semi-supervised</td><td>92.1</td></tr><tr><td>Vinyals &amp; Kaiser el al. (2014) [37]</td><td>semi-supervised</td><td>92.1</td></tr><tr><td>Transformer (4 layers)</td><td>semi-supervised</td><td>92.7</td></tr><tr><td>Luong et al. (2015) [23]</td><td>multi-task</td><td>93.0</td></tr><tr><td>Dyer et al. (2016) [8]</td><td>generative</td><td>93.3</td></tr></table>'}}}}\n\n-----\n\n## Overview of the plan\nBelow is a comprehensive, step\u2010by\u2010step plan that captures the key details from the \u201cAttention Is All You Need\u201d paper. This roadmap is intended to guide you in implementing the Transformer from scratch (since no official code is provided) and reproducing both the machine translation and constituency parsing experiments.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result Outline \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n1. Overview and Objectives\n\u2003\u2022 Reproduce the Transformer model architecture that relies only on attention mechanisms (no RNNs or convolutions).\n\u2003\u2022 Implement and train both a base Transformer (for WMT 2014 English\u2013German/English\u2013French translation) and a variant for English constituency parsing.\n\u2003\u2022 Precisely follow the architecture, hyperparameters, training schedules, regularization, and evaluation metrics as described in the paper.\n\u2003\u2022 Ensure modular code structure (data processing, model construction, training/inference, and evaluation) for clarity and reproducibility.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 2. Methodology Details \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nA. Transformer Model Architecture\n\u20031. Overall Structure\n\u2003\u2003\u2013 Encoder\u2013decoder framework.\n\u2003\u2003\u2013 Encoder: Maps input token embeddings (with added positional encodings) to continuous representations.\n\u2003\u2003\u2013 Decoder: Auto-regressively generates output tokens using a combination of self-attention and encoder\u2013decoder attention.\n\n\u20032. Encoder Details\n\u2003\u2003\u2013 Stack of N = 6 identical layers.\n\u2003\u2003\u2013 Each layer consists of:\n\u2003\u2003\u2003a. Multi-head self-attention sub-layer.\n\u2003\u2003\u2003b. Position-wise feed-forward sub-layer (two linear transformations with a ReLU in between).\n\u2003\u2003\u2013 Employ residual connections around each sub-layer followed by layer normalization.\n\u2003\u2003\u2013 All sub-layer outputs and embeddings have dimension d_model = 512 for the base model.\n\n\u20033. Decoder Details\n\u2003\u2003\u2013 Also a stack of N = 6 identical layers.\n\u2003\u2003\u2013 Contains three sub-layers per layer:\n\u2003\u2003\u2003a. Masked multi-head self-attention (with causal masking so that position i cannot attend to positions > i).\n\u2003\u2003\u2003b. Multi-head encoder\u2013decoder attention (queries from the decoder; keys/values from encoder outputs).\n\u2003\u2003\u2003c. Position-wise feed-forward network.\n\u2003\u2003\u2013 Use residual connections and layer normalization around each sub-layer.\n\n\u20034. Attention Mechanisms\n\u2003\u2003\u2013 Scaled Dot-Product Attention:\n\u2003\u2003\u2003\u2022 For a set of queries Q, keys K, and values V, compute:\n\u2003\u2003\u2003\u2003score = (Q \u00b7 K^T) / \u221a(d_k), then apply softmax and multiply by V.\n\u2003\u2003\u2013 Multi-Head Attention:\n\u2003\u2003\u2003\u2022 Use h = 8 attention heads.\n\u2003\u2003\u2003\u2022 For each head, project Q, K, V using learned matrices to dimensions d_k = d_v = d_model/h = 64.\n\u2003\u2003\u2003\u2022 Concatenate the h outputs and apply a final linear projection.\n\u2003\u2003\u2013 Note: Verify that the matrix multiplications and scaling follow the paper's description exactly.\n\n\u20035. Position-wise Feed-Forward Networks\n\u2003\u2003\u2013 Consist of two linear layers with a ReLU activation in between.\n\u2003\u2003\u2013 Input and output dimension is d_model (512 for the base model).\n\u2003\u2003\u2013 Inner-layer dimension d_ff = 2048.\n\u2003\u2003\u2013 Applied at each position separately.\n\n\u20036. Embeddings and Positional Encoding\n\u2003\u2003\u2013 Use learned embeddings to convert tokens to vectors of dimension d_model.\n\u2003\u2003\u2013 Positional encodings are added to the token embeddings at the bottom of both stacks.\n\u2003\u2003\u2013 Default is sinusoidal encodings:\n\u2003\u2003\u2003PE(pos, 2i) = sin(pos / (10000^(2i/d_model)))\n\u2003\u2003\u2003PE(pos, 2i+1) = cos(pos / (10000^(2i/d_model)))\n\u2003\u2003\u2013 The embeddings for inputs and outputs share the same weight matrix (also used for the final pre-softmax linear transformation), with scaling by \u221a(d_model).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 3. Experiments and Training Setup \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nA. Datasets and Data Processing\n\u20031. Machine Translation Experiments\n\u2003\u2003\u2013 English\u2013German:\n\u2003\u2003\u2003\u2022 Use the WMT 2014 English\u2013German dataset (\u22484.5M sentence pairs).\n\u2003\u2003\u2003\u2022 Preprocess using byte-pair encoding (BPE) to create a shared vocabulary of ~37,000 tokens.\n\u2003\u2003\u2013 English\u2013French:\n\u2003\u2003\u2003\u2022 Use the WMT 2014 English\u2013French dataset (\u224836M sentence pairs).\n\u2003\u2003\u2003\u2022 Tokenization based on word-piece with a vocabulary of 32,000 tokens.\n\u2003\u2003\u2013 Batching:\n\u2003\u2003\u2003\u2022 Group sentence pairs by approximate sequence length.\n\u2003\u2003\u2003\u2022 Each batch should contain roughly 25,000 source tokens and 25,000 target tokens.\n\n\u20032. Constituency Parsing Experiments\n\u2003\u2003\u2013 Use the WSJ portion of the Penn Treebank (\u224840K training sentences).\n\u2003\u2003\u2013 For semi-supervised experiments, supplement with the larger BerkeleyParser and high-confidence data (~17M sentences).\n\u2003\u2003\u2013 Vocabulary:\n\u2003\u2003\u2003\u2022 Use 16K tokens for WSJ-only experiments.\n\u2003\u2003\u2003\u2022 Use 32K tokens in the semi-supervised setting.\n\u2003\u2003\u2013 Preprocessing for constituency parsing (tokenization and conversion to a suitable sequence for tree structures) will need an implementation decision.\n\u2003\u2003\u2003\u2022 Note: The paper does not detail the conversion method, so this may require further clarification or additional literature review.\n\nB. Training Details and Hyperparameters\n\u20031. Optimizer and Learning Rate Scheduling\n\u2003\u2003\u2013 Use the Adam optimizer with:\n\u2003\u2003\u2003\u2022 \u03b21 = 0.9, \u03b22 = 0.98, and \u03f5 = 1e-9.\n\u2003\u2003\u2013 Learning Rate Schedule:\n\u2003\u2003\u2003\u2022 Increase linearly for the first warmup_steps (4000 steps).\n\u2003\u2003\u2003\u2022 Decrease proportionally to the inverse square root of the step number thereafter.\n\u2003\u2003\u2003\u2022 Formula: lr = d_model^(-0.5) * min(step_num^(-0.5), step_num * warmup_steps^(-1.5)).\n\u2003\u2003\u2013 Verify that the implementation reflects the \u201cnoisy\u201d warmup followed by decay as specified.\n\n\u20032. Regularization\n\u2003\u2003\u2013 Apply dropout:\n\u2003\u2003\u2003\u2022 Residual dropout: Apply dropout (p_drop = 0.1 for the base model) to the output of each sub-layer before adding and normalizing.\n\u2003\u2003\u2003\u2022 Also apply dropout to the sum of the embeddings and positional encodings.\n\u2003\u2003\u2013 Label Smoothing:\n\u2003\u2003\u2003\u2022 Use label smoothing with \u03b5_ls = 0.1 during training (this is applied when computing the loss).\n\u2003\u2003\u2022 Note: The big model for the English\u2013French task uses a dropout rate of 0.1 instead of 0.3 as used elsewhere.\n\n\u20033. Training Duration and Hardware\n\u2003\u2003\u2013 For the base model:\n\u2003\u2003\u2003\u2022 Train for 100,000 steps (~12 hours on 8 NVIDIA P100 GPUs; each step \u22480.4 seconds).\n\u2003\u2003\u2013 For the big model:\n\u2003\u2003\u2003\u2022 Train for 300,000 steps (~3.5 days on 8 P100 GPUs; each step \u22481.0 second).\n\u2003\u2003\u2013 Implement checkpoint saving (e.g., every 10 minutes) and use checkpoint averaging:\n\u2003\u2003\u2003\u2022 Average the last 5 checkpoints for the base model.\n\u2003\u2003\u2003\u2022 Average the last 20 checkpoints for the big model.\n\nC. Inference and Decoding\n\u20031. Beam Search\n\u2003\u2003\u2013 For machine translation:\n\u2003\u2003\u2003\u2022 Use beam search with a beam size of 4.\n\u2003\u2003\u2003\u2022 Apply a length penalty of \u03b1 = 0.6.\n\u2003\u2003\u2003\u2022 Set maximum output length to (input length + 50) with early stopping when possible.\n\u20032. For Constituency Parsing:\n\u2003\u2003\u2013 Increase the maximum output length to (input length + 300).\n\u2003\u2003\u2013 Use a beam size of 21 and a length penalty of \u03b1 = 0.3.\n\u2003\u2003\u2013 Note: Tuning these parameters on a validation (development) set is recommended.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 4. Implementation Roadmap \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nStep 1. Environment Setup\n\u2003\u2022 Set up a Python environment (e.g., using virtualenv or conda) with deep learning libraries (e.g., TensorFlow or PyTorch).  \n\u2003\u2022 Although the original paper mentions tensor2tensor, plan an in-house implementation using preferred frameworks.\n\u2003\u2022 Establish reproducibility by fixing random seeds and document versions of all libraries.\n\nStep 2. Data Pipeline Development\n\u2003\u2022 Implement tokenization using BPE for EN\u2013DE and word-piece for EN\u2013FR.\n\u2003\u2022 Write scripts for reading raw data, applying tokenization, creating vocabulary files, and batching data by approximate sequence length.\n\u2003\u2022 For constituency parsing, define any necessary data conversion (e.g., linearization of tree structures) if not clearly specified in the paper.\n\nStep 3. Building the Transformer Components\n\u2003\u2022 Implement the Scaled Dot-Product Attention:\n\u2003\u2003\u2013 Create functions to compute QK^T/sqrt(d_k) followed by softmax and multiplication with V.\n\u2003\u2022 Construct Multi-Head Attention:\n\u2003\u2003\u2013 Write modules for projecting inputs into queries, keys, and values for h attention heads.\n\u2003\u2003\u2013 Concatenate results and apply a final linear transformation.\n\u2003\u2022 Encoder Layer:\n\u2003\u2003\u2013 Build a module that performs multi-head self-attention followed by a feed-forward network.\n\u2003\u2003\u2013 Integrate residual connections and layer normalization.\n\u2003\u2022 Decoder Layer:\n\u2003\u2003\u2013 Implement a module that first performs masked multi-head self-attention.\n\u2003\u2003\u2013 Add encoder\u2013decoder attention and then a feed-forward network.\n\u2003\u2003\u2013 Again, include residual connections and layer normalization.\n\u2003\u2022 Positional Encoding:\n\u2003\u2003\u2013 Implement the sinusoidal positional encoding as described. Allow for the option to switch to learned positional embeddings (as explored in the experiments).\n\u2003\u2022 Embedding Layers:\n\u2003\u2003\u2013 Create token embedding layers that also tie weights with the final linear projection before softmax.\n\nStep 4. Model Assembly and Training Logic\n\u2003\u2022 Assemble the encoder and decoder stacks into a Transformer model.\n\u2003\u2022 Implement the learning rate scheduler according to the training formula.\n\u2003\u2022 Integrate dropout in every sub-layer as specified.\n\u2003\u2022 Include label smoothing in the loss function computation.\n\u2003\u2022 Write training loops with checkpointing and logging, including step counts and learning rate reporting.\n\u2003\u2022 Code evaluation routines that compute perplexity (during training) and BLEU scores (for translation tasks).\n\nStep 5. Inference Module\n\u2003\u2022 Develop a beam search routine that supports variable beam size, length penalty, and early stopping based on maximum output length.\n\u2003\u2022 Ensure separate configurations (beam size and penalty) for both translation and parsing tasks.\n\nStep 6. Experiment Management and Reproducibility\n\u2003\u2022 Document all hyperparameters used (e.g., d_model, d_ff, number of layers, dropout rate, warmup steps, optimizer parameters).\n\u2003\u2022 Implement logging for training progress, checkpoint performance, and evaluation metrics on development/test sets.\n\u2003\u2022 Save and later average the required checkpoints.\n\u2003\u2022 Create clear experiment scripts to run base models, big models, and constituency parsing experiments.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 5. Evaluation Metrics and Experimental Settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nA. Machine Translation\n\u2003\u2022 Primary metric: BLEU score measured on newstest sets (newstest2013 for development, newstest2014 for final evaluation).\n\u2003\u2022 Record perplexity during training (note: reported perplexities are per wordpiece).\n\u2003\u2022 Validate performance against reported scores:\n\u2003\u2003\u2013 For EN\u2013DE: Base model (\u224827.3 BLEU) and Big model (\u224828.4 BLEU).\n\u2003\u2003\u2013 For EN\u2013FR: Base model (\u224838.1 BLEU) and Big model (\u224841.8 BLEU).\n\nB. Constituency Parsing\n\u2003\u2022 Evaluation metric: F1 score on the WSJ Section 23 test set.\n\u2003\u2022 Compare your results against prior work; reported F1 scores range from \u224891.3 to >93.0 in various settings.\n\u2003\u2022 Note: The experimental details (such as beam search configurations) must be carefully followed (beam size = 21, length penalty = 0.3).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 6. Open Questions and Clarifications Needed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u2022 For constituency parsing, the paper briefly mentions \u201conly a small number of experiments\u201d to choose dropouts and learning rates. The exact feed-forward network size (d_ff) for the 4-layer Transformer with d_model=1024 isn\u2019t explicitly stated\u2014consider using a scaling similar to the translation model (possibly d_ff around 4096) or conduct hyperparameter tuning.\n\u2022 The method for converting constituency parsing trees to a sequence suitable for the Transformer (and then converting the output back to trees) is not fully described. Decide on an appropriate linearization strategy and verify its validity.\n\u2022 Implementation details such as precise checkpoint saving intervals, exact batch construction (tokens vs. sentences), and early stopping criteria for beam search may need further tuning relative to your available compute environment.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 7. Final Steps and Next Developments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\u2022 Verify the implementation by first training on a small dataset or subset to ensure that the forward/backward passes work properly.\n\u2022 Once debugging and unit tests pass, scale training to the full datasets as described.\n\u2022 Compare your BLEU scores and perplexities with the results in the paper. Use ablation studies (e.g., alternate numbers of attention heads, changes to dropout rates) to further validate the model components.\n\u2022 Document each experiment, the logs, and checkpoint performance for full reproducibility and easier integration into the final code.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Conclusion \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nThis plan breaks down the key aspects of both the methodology and experiments in \u201cAttention Is All You Need.\u201d Following this roadmap will facilitate writing modular, well-structured code that reflects the detailed experimental setup in the paper. Where details are ambiguous (e.g., constituency parsing linearization or the exact d_ff for d_model=1024), note these and perform preliminary experiments or consult additional literature for guidance. This thorough strategy should serve as a strong foundation for the final implementation.\n\n-----\n\n## Design\n[CONTENT]\n{\n    \"Implementation approach\": \"We will implement a simplified system in Python using open-source libraries such as PyTorch for deep learning and Hugging Face's tokenizers for BPE/WordPiece tokenization. The system is composed of modular components that closely follow the structure of the Transformer: a dataset loader for preparing WMT and WSJ datasets, a Transformer model containing encoder, decoder, multi-head attention, positional encoding, and feed-forward network modules, a training module that implements the Adam optimizer with custom learning rate scheduling (including warmup and decay), dropout regularization, and label smoothing, and an evaluation module to compute BLEU scores for MT and F1 scores for constituency parsing. Configuration parameters are centralized in a configuration file, and the overall design emphasizes clarity and reproducibility.\",\n    \"File list\": [\n        \"main.py\",\n        \"dataset_loader.py\",\n        \"model.py\",\n        \"trainer.py\",\n        \"evaluation.py\",\n        \"config.py\",\n        \"utils.py\"\n    ],\n    \"Data structures and interfaces\": \"classDiagram\\n    class Main {\\n        +__init__(config: dict)\\n        +run_experiment() -> None\\n    }\\n    class DatasetLoader {\\n        +__init__(config: dict)\\n        +load_data() -> Tuple[Dataset, Dataset, Dataset]\\n    }\\n    class TransformerModel {\\n        +__init__(params: dict)\\n        +forward(x: Tensor) -> Tensor\\n        +train_step(batch: dict) -> dict\\n    }\\n    class Trainer {\\n        +__init__(model: TransformerModel, train_data: Dataset, dev_data: Dataset, config: dict)\\n        +train() -> None\\n        +save_checkpoint(path: str) -> None\\n    }\\n    class Evaluation {\\n        +__init__(model: TransformerModel, test_data: Dataset, config: dict)\\n        +evaluate_mt() -> dict\\n        +evaluate_parsing() -> dict\\n    }\\n    \\n    Main --> DatasetLoader : uses\\n    Main --> TransformerModel : creates\\n    Main --> Trainer : invokes training\\n    Main --> Evaluation : calls evaluation\\n    Trainer --> TransformerModel : trains\\n\",\n    \"Program call flow\": \"sequenceDiagram\\n    participant M as Main\\n    participant DL as DatasetLoader\\n    participant TM as TransformerModel\\n    participant TR as Trainer\\n    participant EV as Evaluation\\n    \\n    M->>DL: __init__(config)\\n    M->>DL: load_data()\\n    DL-->>M: (train_data, dev_data, test_data)\\n    \\n    M->>TM: __init__(params)\\n    M->>TR: __init__(TM, train_data, dev_data, config)\\n    M->>EV: __init__(TM, test_data, config)\\n    \\n    M->>TR: train()\\n    TR->>TM: forward(batch) \\n    TM-->>TR: predictions + loss\\n    TR->>TM: train_step(batch)\\n    TR->>M: save_checkpoint() periodically\\n    \\n    M->>EV: evaluate_mt()\\n    EV->>TM: forward(x) for MT\\n    TM-->>EV: predictions\\n    EV-->>M: BLEU metrics\\n    \\n    M->>EV: evaluate_parsing()\\n    EV->>TM: forward(x) for parsing\\n    TM-->>EV: predictions\\n    EV-->>M: F1 score and parsing metrics\\n\",\n    \"Anything UNCLEAR\": \"It is unclear how constituency parsing trees should be linearized into a sequence format for training and evaluation. Additionally, the exact dataset file formats and tokenization preprocessing details (such as file encodings and delimiter conventions) need clarification. Further details on some hyperparameters for the parsing model variant (e.g., inner layer size for d_model=1024) would also be beneficial.\"\n}\n[/CONTENT]\n\n-----\n\n## Task\n[CONTENT]\n{\n    \"Required packages\": [\n        \"numpy==1.21.0\",\n        \"torch==1.9.0\",\n        \"tokenizers==0.10.3\",\n        \"sentencepiece==0.1.96\",\n        \"tqdm==4.62.3\"\n    ],\n    \"Required Other language third-party packages\": [\n        \"No third-party dependencies required\"\n    ],\n    \"Logic Analysis\": [\n        [\n            \"config.py\",\n            \"Holds centralized configuration parameters (e.g., hyperparameters, file paths, model sizes, dropout rates, optimizer settings). This module is imported by all other parts in order to maintain consistency.\"\n        ],\n        [\n            \"utils.py\",\n            \"Provides common utility functions such as logging, checkpoint saving/loading, and tokenization helpers. These functions are used across dataset_loader.py, trainer.py, and evaluation.py.\"\n        ],\n        [\n            \"dataset_loader.py\",\n            \"Defines the DatasetLoader class, which is responsible for reading raw text data (WMT, WSJ), performing tokenization using Hugging Face tokenizers (BPE/WordPiece), building vocabularies, splitting data into training, validation, and test sets, and constructing batches based on token counts. Imports configuration from config.py and utility functions from utils.py.\"\n        ],\n        [\n            \"model.py\",\n            \"Defines the TransformerModel class along with its submodules: Encoder, Decoder, MultiHeadAttention, PositionalEncoding, and Position-wise FeedForward networks. This file contains all the necessary components to build the attention-based model in accordance with the paper. It exports forward() and train_step() methods for integration with the training process.\"\n        ],\n        [\n            \"trainer.py\",\n            \"Contains the Trainer class that manages the training loop. It imports the TransformerModel from model.py and DatasetLoader from dataset_loader.py. Implements training steps including forward pass, backpropagation, and optimizer updates using Adam with custom learning rate scheduling, warmup, and decay. Also handles checkpoint saving and logging training metrics via utils.py.\"\n        ],\n        [\n            \"evaluation.py\",\n            \"Implements the Evaluation class which loads a trained model and evaluates its performance. It computes BLEU scores for machine translation tasks and F1 scores for constituency parsing tasks. Relies on utilities from utils.py for batch processing and metric computations.\"\n        ],\n        [\n            \"main.py\",\n            \"Serves as the entry point of the application. Orchestrates the complete experiment workflow by reading configuration from config.py, initializing the DatasetLoader, TransformerModel, Trainer, and Evaluation classes, and invoking training and evaluation routines in the correct sequence.\"\n        ]\n    ],\n    \"Task list\": [\n        \"config.py\",\n        \"utils.py\",\n        \"dataset_loader.py\",\n        \"model.py\",\n        \"trainer.py\",\n        \"evaluation.py\",\n        \"main.py\"\n    ],\n    \"Full API spec\": \"\",\n    \"Shared Knowledge\": \"Configuration parameters, logging functions, tokenization routines, and checkpoint management logic are shared across modules. All modules import common settings from config.py and helper functions from utils.py to ensure consistency and reproducibility. Model hyperparameters (e.g., d_model, d_ff, number of layers, dropout rates) are centralized and used by both the model and trainer components.\",\n    \"Anything UNCLEAR\": \"Clarification is needed on the exact linearization strategy for constituency parsing trees and the expected dataset file format details. In addition, more details on the specialized hyperparameters for the parsing experiments (e.g., the inner layer size for d_model=1024) and recommended hardware configuration for large-scale experiments would be beneficial.\"\n}\n[/CONTENT]\n\n-----\n\n## Configuration file\n```yaml\n## config.yaml\ntraining:\n  total_steps: 100000        # For base model training (12 hours on 8 x P100 GPUs)\n  warmup_steps: 4000         # Warmup steps as described in the paper\n  optimizer: adam\n  adam:\n    beta1: 0.9\n    beta2: 0.98\n    epsilon: 1e-9\n  learning_rate_schedule: \"d_model^-0.5 * min(step^-0.5, step * warmup_steps^-1.5)\"\n  dropout_rate: 0.1          # Dropout rate applied to sub-layer outputs and embeddings\n  batch_tokens: 25000        # Approximate number of source tokens (and target tokens) per batch\n\nmodel:\n  type: transformer_base\n  d_model: 512               # Dimensionality of model embeddings (for base model)\n  num_layers: 6              # Number of encoder and decoder layers\n  d_ff: 2048                 # Dimensionality of the inner feed-forward layer\n  num_heads: 8               # Number of parallel attention heads\n  d_k: 64                    # Dimension per attention head (d_model / num_heads)\n  d_v: 64                    # Dimension per attention head (d_model / num_heads)\n  positional_encoding: sinusoidal  # Use sinusoidal positional encoding as described in the paper\n  share_embedding: true      # Share embedding weights with pre-softmax linear transformation\n\ninference:\n  beam_size: 4              # Beam search size for translation experiments\n  length_penalty: 0.6       # Length penalty for the beam search\n  max_output_length_offset: 50  # Maximum output length = input length + 50\n\nparsing:\n  model:\n    type: transformer_parsing\n    num_layers: 4                   # 4-layer Transformer for constituency parsing\n    d_model: 1024                   # Model dimensionality for parsing experiments\n  vocab_size:\n    wsj: 16000                    # Vocabulary size for WSJ-only training\n    semi_supervised: 32000        # Vocabulary size for semi-supervised training\n  inference:\n    beam_size: 21\n    length_penalty: 0.3\n    max_output_length_offset: 300     # Maximum output length = input length + 300\n\ndata:\n  wmt_2014_en_de:\n    dataset_size: \"4.5M sentence pairs\"\n    tokenizer: BPE\n    vocab_size: 37000\n  wmt_2014_en_fr:\n    dataset_size: \"36M sentence pairs\"\n    tokenizer: wordpiece\n    vocab_size: 32000\n  wsj:\n    dataset: \"Penn Treebank WSJ\"\n    training_size: \"40K sentences\"\n  semi_supervised_parsing:\n    dataset: \"BerkleyParser and high-confidence corpus\"\n    training_size: \"17M sentences\"\n\nhardware:\n  gpus: 8\n  gpu_type: \"NVIDIA P100\"\n  base_model_training_time: \"12 hours\"\n  big_model_training_time: \"3.5 days\"\n```\n-----\n\n## Instruction\nConduct a Logic Analysis to assist in writing the code, based on the paper, the plan, the design, the task and the previously specified configuration file (config.yaml). \nYou DON'T need to provide the actual code yet; focus on a thorough, clear analysis.\n\nWrite the logic analysis in 'evaluation.py', which is intended for 'Implements the Evaluation class which loads a trained model and evaluates its performance. It computes BLEU scores for machine translation tasks and F1 scores for constituency parsing tasks. Relies on utilities from utils.py for batch processing and metric computations.'.\n\n-----\n\n## Logic Analysis: evaluation.py"}, {"role": "assistant", "content": "Below is a detailed logic analysis for evaluation.py. This analysis describes the overall design and step\u2010by\u2010step processing that the Evaluation class will follow in order to load a trained Transformer model and compute the final metrics (BLEU for machine translation and F1 for constituency parsing) according to the paper and using the parameters specified in config.yaml.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Evaluation Module Overview \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2022 The Evaluation class is responsible for assessing the model\u2019s performance after training. It is initialized with a trained Transformer model (which can be either the base translation model or the parsing model variant), a test dataset, and the central configuration dictionary.\n\u2022 It provides two main evaluation functions:\n\u2003\u2003\u2013 evaluate_mt(): Designed for machine translation tasks. This method will generate predictions using beam search (with beam size, length penalty, and max output length offset taken from config.inference) and then calculate the BLEU score by comparing the generated translations with the ground truth.\n\u2003\u2003\u2013 evaluate_parsing(): Designed for constituency parsing tasks. This method will similarly perform inference using beam search (with settings from config.parsing.inference) and then convert the linearized predicted sequences back into tree structures. A utility function (from utils.py) will then be used to compute the F1 score between the predicted trees and the gold-standard trees.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Detailed Logic Steps \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n1. Initialization (in __init__):\n\u2003\u2022 Store the following as instance variables:\n\u2003\u2003\u2013 self.model: The trained TransformerModel.\n\u2003\u2003\u2013 self.test_data: The dataset on which evaluation will be run.\n\u2003\u2003\u2013 self.config: The central configuration dictionary imported from config.yaml.\n\u2003\u2022 Ensure the model is switched to evaluation mode (e.g., calling model.eval() in PyTorch) to disable dropout and other training-specific behaviors.\n\u2003\u2022 (Optionally) Load any required utility functions from utils.py for token decoding, beam search, checkpoint management, and metric calculation.\n\n2. Machine Translation Evaluation (evaluate_mt method):\n\u2003a. Retrieve Inference Parameters:\n\u2003\u2003\u2013 beam_size: Read from config.inference.beam_size (expected value: 4).\n\u2003\u2003\u2013 length_penalty: Read from config.inference.length_penalty (expected value: 0.6).\n\u2003\u2003\u2013 max_output_length_offset: Read from config.inference.max_output_length_offset (input length + 50).\n\u2003b. Loop Over Test Data:\n\u2003\u2003\u2013 Use a batch processing routine (e.g., iterating with a progress bar from tqdm) provided by utils.py.\n\u2003\u2003\u2013 For each batch in the test dataset:\n\u2003\u2003\u2003\u2022 Prepare input tokens (source language) for the model.\n\u2003\u2003\u2003\u2022 Invoke the model\u2019s inference routine. Although the model\u2019s forward() method is normally used during training, for evaluation a beam search decoding method (or an external helper in utils.py) should be called, providing the beam_size, length penalty, and computed maximum length for the output (source length + offset).\n\u2003\u2003\u2003\u2022 The beam search routine should return one or multiple predicted sequences per input.\n\u2003c. Post-Processing:\n\u2003\u2003\u2013 Convert the predicted token IDs into text strings using the tokenizer\u2019s decode functionality (a helper in utils.py).\n\u2003\u2003\u2013 Similarly, convert the corresponding ground truth token sequences into strings.\n\u2003d. Metric Computation:\n\u2003\u2003\u2013 Accumulate all predictions (hypotheses) and their corresponding reference translations.\n\u2003\u2003\u2013 Call a utility function (e.g., compute_bleu in utils.py) to compute the overall corpus-level BLEU score.\n\u2003\u2003\u2013 Log or store intermediate batch-level scores as needed.\n\u2003e. Return and/or Log Metrics:\n\u2003\u2003\u2013 The method returns a dictionary with the final BLEU score as well as any additional details (e.g., count of sentences, aggregated statistics).\n\n3. Constituency Parsing Evaluation (evaluate_parsing method):\n\u2003a. Retrieve Parsing Inference Parameters:\n\u2003\u2003\u2013 beam_size: Read from config.parsing.inference.beam_size (expected value: 21).\n\u2003\u2003\u2013 length_penalty: Read from config.parsing.inference.length_penalty (expected value: 0.3).\n\u2003\u2003\u2013 max_output_length_offset: Read from config.parsing.inference.max_output_length_offset (input length + 300).\n\u2003b. Loop Over Parsing Test Data:\n\u2003\u2003\u2013 For each batch in the parsing dataset, perform similar processing as for machine translation:\n\u2003\u2003\u2003\u2022 Pass input (which may be a linearized version of the source or a sentence to be parsed) to the model.\n\u2003\u2003\u2003\u2022 Use beam search (with the parsing-specific parameters) to generate predictions.\n\u2003c. Tree Conversion and Post-Processing:\n\u2003\u2003\u2013 Since the paper does not fully specify how constituency parsing trees are linearized, assume that there is a utility function (e.g., linearization_to_tree or similar in utils.py) that converts the predicted token sequence back into a tree or bracketed string representation.\n\u2003\u2003\u2013 Similarly, convert the ground truth (gold) sequences to the corresponding tree representation.\n\u2003d. Metric Computation for Parsing:\n\u2003\u2003\u2013 The F1 score is computed by comparing the predicted tree structure versus the gold-standard tree.\n\u2003\u2003\u2013 Use a helper function from utils.py (e.g., compute_f1) to calculate the F1 score.\n\u2003\u2003\u2013 As with MT, accumulate these metrics over all batches.\n\u2003e. Return and/or Log Metrics:\n\u2003\u2003\u2013 Return a dictionary containing the F1 score, along with other potentially useful metrics (e.g., precision, recall, and counts).\n\n4. Additional Considerations and Utilities:\n\u2003\u2022 Both evaluation methods should disable gradient computations (using torch.no_grad()) to speed up inference and reduce memory usage.\n\u2003\u2022 Use consistent tokenization and decoding routines\u2014the same ones used during training\u2014to ensure that differences in tokenization do not skew BLEU or F1 results.\n\u2003\u2022 All hyperparameters for beam search and maximum output length are strictly read from the config.yaml, ensuring reproducibility.\n\u2003\u2022 Log progress and results via logging utilities in utils.py; a progress bar from tqdm can help monitor the evaluation loop.\n\u2003\u2022 Uncertainty remains regarding the linearization strategy for constituency trees. A placeholder function should be used (with a clear comment noting where clarification is needed) so that it can be updated once the exact strategy is determined.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Integration with Overall Design \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2022 The Evaluation class will be instantiated in main.py after training has been completed. It uses the same TransformerModel instance (now in evaluation mode) and passes the appropriate test dataset based on the experiment (either machine translation or parsing).\n\u2022 As with the design, Evaluation relies on helper functions from utils.py and the configuration parameters from config.py. No additional public member functions beyond those in the design (evaluate_mt and evaluate_parsing) will be added.\n\u2022 The modular design ensures that any changes to decoding (e.g., improvements to beam search) need only be made in the utility functions and will automatically be reflected in both evaluation methods.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Summary \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nIn summary, evaluation.py will:\n\u2003\u2022 Initialize with the trained model, test dataset, and configuration.\n\u2003\u2022 For machine translation:\n\u2003\u2003\u2013 Use beam search (with beam size 4, length penalty 0.6, max_output_length = input_length + 50) to generate outputs.\n\u2003\u2003\u2013 Decode both predicted and reference sequences.\n\u2003\u2003\u2013 Compute and return the aggregated BLEU score.\n\u2003\u2022 For constituency parsing:\n\u2003\u2003\u2013 Use a specialized beam search (with beam size 21, length penalty 0.3, max_output_length = input_length + 300).\n\u2003\u2003\u2013 Convert the linearized outputs to constituency trees.\n\u2003\u2003\u2013 Compute and return F1 (and possibly additional parsing metrics) using a designated utility.\n\u2003\u2022 Ensure reproducibility by relying exclusively on parameters specified in config.yaml and by using shared utility functions throughout the evaluation process.\n\nThis comprehensive logic analysis should serve as a roadmap when writing the implementation in evaluation.py."}]